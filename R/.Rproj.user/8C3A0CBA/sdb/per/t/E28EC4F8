{
    "collab_server" : "",
    "contents" : "Breakdown of what final R notebook should include: \n\n## All install.packages + libraries \n    1. GGplot2 \n    2. Jsonlite \n    3. Tidyverse \n    4. Likert\n    5. Psych \n    6. Datatable \n\n\n## Included instructions on what each chunk is cleaning and why (+ add brief description of how to interpret results)\n\ncleanData = \nCriteria: \n1. Complete batches (bonuses!=0? if not confident that complete batches is accurate?)\n2. Variables of interest: \n\t1. id \n\t2. mTurkId\n\t3. assignmentId\n\t4. batch # \n\t5. results.condition \n\t6. results.format \n\t7. results.manipulation \n\t8. results.manipulation check \n\t9. results.blacklist check \n\t10. results.viability(1:15)(3 rounds)\n\t11.room \n\t12. rooms(list) \n4. New row for each round of survey answers \n5. Factor levels \n\ta. Survey \n\tb. Repeat team question \n\tc. Blacklist \n6. Group by random treatment configuration for each batch \n- Loop for each treatment type: \n- e.g. (1,2,1 grouping might iterate on each user: groupAMask <- for users with round[1]==A & round[3]==A, groupBmask <- round[2]==B & round[2]==B, etc.) or if (2,1,1: grouping iterate on each user: groupAMask <- round[2]==A & round[3]==A, etc.)\n\nCreating generalized masked and unmasked groupings when data is read in: \ngroupBmask \n- Observations in round[1] = unmasked \n- Observation in round[2] = masked \n\nDo we want all visualizations and data table analyses to output per group? \n\n- Can we generalize? i.e. combine and compare -  \nAll observations in first round of group - unmasked \nAll observations in last round of group - masked \nMeta-look at variability consistency / inconsistency with visualizations + summary tables \n\n+ hidden function to filter cleanData based on variables (e.g. list of batch numbers, round, etc. for more case study style apporach to data analysis) \n\n##2 Likert datatables: \n\npsychSafetyLikert: \n\n1. Psych safety likert \n\ta. Select columns contain psychsafety \n\tb. Add labels  \n\tb. Summary table of answer distributions \n\tc. Traditional likert plot \n\td. Heat wave likert plot  \n\nviabilityLikert: \n\n2. Viability likert \n\ta. Select columns contain viability \n\tb. Add labels  \n\tb. Summary table of answer distributions \n\tc. Traditional likert plot \n\td. Heat wave likert plot  \n\n##3 \n\nviabilityNumeric: \n\n1. as.factor: as.numeric \n2. New column: sum of room aggregate viability answers: aggregateViabilitySum\n3. New column: sum of individual viability answers: \nindividualViabilitySum \n3. New column: mean of room aggregate viability scores: viabilityMean \n4. New column: standard deviation of room aggregate viability scores\n\n**Graphs:** \n\nviabilityMeanDistribution: (1 graph)\n\n1. GGplot mean distribution + viability sum (group)\n2. GGplot mean distribution.+ viability sum (individual)\n\nrepeatTeamViabilitySum: (multiple graphs)\n\n1. GGplot group viability sum + repeat team question  \n2. GGplot individual viability sum + repeat team question (overlay round + room) \n3. GGplot viability T-test boxplot + facet_grid \n\n\n***Statistical analyses***: \n\n1. Use Wilcox test to test for a difference in scoring tendancies between exactly 2 groups \n2. Use Kruskal-Wallis Test to test for a difference in scoring tendancies between 2+ groups\n3. To test for a difference in means between two groups: use Anova to treat this type of data if we there is a “normally” distributed continious\n4. If parametric inference is justified, run following tests: \n\nHow to test qualitative measures as predictive in defining fracture? \n - Blind review chat data for groups and vote on fracture based on measures // compare with predictive analysis \n\n## Chat data: \n\n\n\n\n\n\n\n",
    "created" : 1536901842464.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1675877670",
    "id" : "E28EC4F8",
    "lastKnownWriteTime" : 1535779551,
    "last_content_update" : 1535779551,
    "path" : "~/Documents/bang9/R/dataTables",
    "project_path" : "dataTables",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "text"
}